/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package laboratorium.aggigie;

import org.junit.jupiter.api.Test;
import org.mockito.Mockito;


import javax.management.RuntimeErrorException;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class CarTest {

        private Car myFerrari = mock(Car.class);

        @Test
        public void test_instance_car(){
            assertTrue(myFerrari instanceof Car);
        }

        @Test
        public void test_default_behavior_needsFuel(){
            assertFalse(myFerrari.needsFuel(), "New test double should return False as boolean");
        }

        @Test
        public void test_default_behavior_temperature(){
            assertEquals(0.0, myFerrari.getEngineTemperature(), "New test double should return 0.0");
        }

        @Test
        public void test_stubbing_mock(){
            when(myFerrari.needsFuel()).thenReturn(true);
            assertTrue(myFerrari.needsFuel());
        }

        @Test
        public void test_exception(){
            when(myFerrari.needsFuel()).thenThrow(new RuntimeException());
            assertThrows(RuntimeException.class, () -> {
                myFerrari.needsFuel();
            });
        }

        @Test
        public void testVerification(){
            myFerrari.driveTo("Kartuzy");
            myFerrari.needsFuel();

            verify(myFerrari).driveTo("Kartuzy");
            verify(myFerrari).needsFuel();
            assertFalse(myFerrari.needsFuel());
        }

        @Test
        public void testIfUnableToDriveWhenNoFuel() {
            when(myFerrari.needsFuel()).thenReturn(true);
            Mockito.doThrow(new RuntimeException()).when(myFerrari).driveTo(anyString());
            final String destinationCity = "Alicante";
            assertAll(() -> {
                assertTrue(myFerrari.needsFuel());
                assertThrows(RuntimeException.class, () -> {
                        myFerrari.driveTo(destinationCity);});
            });
            verify(myFerrari).driveTo(destinationCity);
            verify(myFerrari).needsFuel();
        }

        @Test
        public void testTemperatureLevel(){
            final Double engineTemp = 80.8;
            final String destinationCity = "Alicante";

            when(myFerrari.getEngineTemperature()).thenReturn(engineTemp);
            Mockito
                    .doThrow(
                            new RuntimeException())
                    .when(myFerrari)
                    .driveTo(anyString());

            assertAll(() -> {
                assertEquals(engineTemp, myFerrari.getEngineTemperature());
                assertThrows(RuntimeException.class, () -> {
                    myFerrari.driveTo(destinationCity);
                });
            });
            verify(myFerrari).getEngineTemperature();
            verify(myFerrari).driveTo(destinationCity);
        }

        @Test
        public void testMisusedDestinations(){
            final String destinationCity = "Alicante";
            final String theCity = "Barcelona";
            myFerrari.driveTo(destinationCity);
            assertNotEquals(destinationCity, theCity);
            verify(myFerrari, never()).driveTo(theCity);
        }
}
